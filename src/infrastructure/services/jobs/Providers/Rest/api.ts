/* tslint:disable */
/* eslint-disable */
/**
 * Jobs Api
 * Jobs Api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiAuthLoginPost200Response
 */
export interface ApiAuthLoginPost200Response {
    /**
     * 
     * @type {object}
     * @memberof ApiAuthLoginPost200Response
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiAuthLoginPostRequest
 */
export interface ApiAuthLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Positions
 */
export interface Positions {
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'company_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'how_to_apply'?: string;
    /**
     * 
     * @type {string}
     * @memberof Positions
     */
    'company_logo'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary api to login user 
         * @param {ApiAuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (body: ApiAuthLoginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'body', body)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary api to register user
         * @param {ApiAuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (body: ApiAuthLoginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiAuthRegisterPost', 'body', body)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary api to login user 
         * @param {ApiAuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(body: ApiAuthLoginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary api to register user
         * @param {ApiAuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(body: ApiAuthLoginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary api to login user 
         * @param {ApiAuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body: ApiAuthLoginPostRequest, options?: any): AxiosPromise<ApiAuthLoginPost200Response> {
            return localVarFp.apiAuthLoginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary api to register user
         * @param {ApiAuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body: ApiAuthLoginPostRequest, options?: any): AxiosPromise<ApiAuthLoginPost200Response> {
            return localVarFp.apiAuthRegisterPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary api to login user 
     * @param {ApiAuthLoginPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(body: ApiAuthLoginPostRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary api to register user
     * @param {ApiAuthLoginPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(body: ApiAuthLoginPostRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecruitmentApi - axios parameter creator
 * @export
 */
export const RecruitmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary api to get position job detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecruitmentPositionsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecruitmentPositionsIdGet', 'id', id)
            const localVarPath = `/api/recruitment/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary api to get list position job
         * @param {string} [page] page pagination
         * @param {string} [description] description filter
         * @param {string} [location] 
         * @param {boolean} [fullTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecruitmentPositionsJsonGet: async (page?: string, description?: string, location?: string, fullTime?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/recruitment/positions.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (fullTime !== undefined) {
                localVarQueryParameter['full_time'] = fullTime;
            }



    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecruitmentApi - functional programming interface
 * @export
 */
export const RecruitmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecruitmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary api to get position job detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecruitmentPositionsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecruitmentPositionsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary api to get list position job
         * @param {string} [page] page pagination
         * @param {string} [description] description filter
         * @param {string} [location] 
         * @param {boolean} [fullTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecruitmentPositionsJsonGet(page?: string, description?: string, location?: string, fullTime?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Positions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecruitmentPositionsJsonGet(page, description, location, fullTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecruitmentApi - factory interface
 * @export
 */
export const RecruitmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecruitmentApiFp(configuration)
    return {
        /**
         * 
         * @summary api to get position job detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecruitmentPositionsIdGet(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiRecruitmentPositionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary api to get list position job
         * @param {string} [page] page pagination
         * @param {string} [description] description filter
         * @param {string} [location] 
         * @param {boolean} [fullTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecruitmentPositionsJsonGet(page?: string, description?: string, location?: string, fullTime?: boolean, options?: any): AxiosPromise<Positions> {
            return localVarFp.apiRecruitmentPositionsJsonGet(page, description, location, fullTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecruitmentApi - object-oriented interface
 * @export
 * @class RecruitmentApi
 * @extends {BaseAPI}
 */
export class RecruitmentApi extends BaseAPI {
    /**
     * 
     * @summary api to get position job detail
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApi
     */
    public apiRecruitmentPositionsIdGet(id: string, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).apiRecruitmentPositionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary api to get list position job
     * @param {string} [page] page pagination
     * @param {string} [description] description filter
     * @param {string} [location] 
     * @param {boolean} [fullTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApi
     */
    public apiRecruitmentPositionsJsonGet(page?: string, description?: string, location?: string, fullTime?: boolean, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).apiRecruitmentPositionsJsonGet(page, description, location, fullTime, options).then((request) => request(this.axios, this.basePath));
    }
}


